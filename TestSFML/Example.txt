#define _CRT_SECURE_NO_WARNINGS
#define NOMINMAX
#include <Windows.h>
#include <locale.h>
#include <SFML/Graphics.hpp>
#include <string>
#include <iostream>
#undef NOMINMAX
#include <locale>
#include <SFML/Graphics.hpp>
#include <iostream>
#include <SFML/System/String.hpp>
#include <vector>

const int WINDOW_WIDTH = 800;
const int WINDOW_HEIGHT = 600;
const int BUTTON_WIDTH = 200;
const int BUTTON_HEIGHT = 50;
const int TITLE_WIDTH = 300;
const int TITLE_HEIGHT = 100;
const int MENU_PADDING = 20;
const int CELL_SIZE = 50;
const int FIELD_SIZE = 5;
const int PLAYER_INFO_WIDTH = 150;
const int PLAYER_INFO_HEIGHT = 50;

enum MenuState {
    PLAY_PVP,
    PLAY_PVE,
    DIFFICULTY,
    HELP
};

struct Button {
    sf::RectangleShape shape;
    sf::Text text;
};

void createButton(Button& button, const sf::String& buttonText, const sf::Font& font, int x, int y) {
    y += TITLE_HEIGHT + 50;
    button.shape.setSize(sf::Vector2f(BUTTON_WIDTH, BUTTON_HEIGHT));
    button.shape.setPosition(x, y);
    button.shape.setFillColor(sf::Color::White);
    button.text.setFont(font);
    button.text.setString(buttonText);
    button.text.setCharacterSize(24);
    button.text.setFillColor(sf::Color::Black);
    sf::FloatRect textBounds = button.text.getLocalBounds();
    button.text.setPosition(x + (BUTTON_WIDTH - textBounds.width) / 2, y + (BUTTON_HEIGHT - textBounds.height) / 2);
}

void destroyButton(Button& button) {
    // Уничтожение ресурсов кнопки
}
int checkLetter(char let) {
    //int res = 0;
    char abc[] = "оеаинтсрвлкмдпуяыьгзбчйхжшюцщэфъё";
    for (int i = 0; i < 33; i++) {
        if (let == abc[i]-32) {
            return 1;
        }
    }
    return 0;
}

int poisk(char* slovo, int len) {
    FILE* f;
    f = fopen("russian_nouns.txt", "r");
    char word[50];
    //fseek(f, 0, SEEK_SET);
    
    while (fgets(word, 50, f) != NULL) {
        int per = memcmp(slovo, word, len);
        if (per == 0) {
            if (len == strlen(word)) {
                return 1;
            }
        }
    }
    return 0;
}

int inArray(int array[FIELD_SIZE * FIELD_SIZE][2], int len, int y, int x) {
    for (int i = 0; i < len; i++) {
        if (array[i][0] == y && array[i][1] == x) {
            return 1;
        }
    }
    return 0;
}

struct Cell {
    sf::RectangleShape shape;
    sf::Text text;
    sf::String content;
    char value;
};

void createCell(Cell& cell, const sf::Font& font, int x, int y) {
    cell.shape.setSize(sf::Vector2f(CELL_SIZE, CELL_SIZE));
    cell.shape.setPosition(x, y);
    cell.shape.setFillColor(sf::Color::Black);
    cell.shape.setOutlineThickness(2);
    cell.shape.setOutlineColor(sf::Color::White);

    cell.text.setFont(font);
    cell.text.setCharacterSize(24);
    cell.text.setFillColor(sf::Color::White);
    cell.text.setPosition(x + 10, y + 10);
}

int handleInput(const sf::Event& event, int currentState) {
    //int nowButton = -1;
    if (event.type == sf::Event::KeyPressed) {
        if (event.key.code == sf::Keyboard::W || event.key.code == sf::Keyboard::Up) {
            if (currentState > PLAY_PVP) {
                currentState--;
            }
            else {
                currentState = HELP;
            }
            return(currentState);
        }
        else if (event.key.code == sf::Keyboard::S || event.key.code == sf::Keyboard::Down) {
            if (currentState < HELP) {
                currentState++;
            }
            else {
                currentState = PLAY_PVP;
            }
            return(currentState);
        }
        else if (event.key.code == sf::Keyboard::Enter) {
            return -1;
            // Обработка нажатия клавиши Enter
        }
        else {
            if (currentState < 0) {
                currentState = 0;
            }
            return currentState;
        }
    }
    //return currentState;
}

int* cellChoice(const sf::Event& event, int selX, int selY) {
    int res[2] = { selX, selY };
    if (event.type == sf::Event::KeyPressed) {
        if (event.key.code == sf::Keyboard::W || event.key.code == sf::Keyboard::Up) {
            if (selY > 0) {
                selY--;
            }
            else {
                selY = FIELD_SIZE - 1;
            }
            res[1] = selY;
            return(res);
        }
        else if (event.key.code == sf::Keyboard::S || event.key.code == sf::Keyboard::Down) {
            if (selY < FIELD_SIZE - 1) {
                selY++;
            }
            else {
                selY = 0;
            }
            res[1] = selY;
            return(res);
        }
        else if (event.key.code == sf::Keyboard::A || event.key.code == sf::Keyboard::Left) {
            if (selX > 0) {
                selX--;
            }
            else {
                selX = FIELD_SIZE-1;
            }
            res[0] = selX;
            return(res);
        }
        else if (event.key.code == sf::Keyboard::D || event.key.code == sf::Keyboard::Right) {
            if (selX < FIELD_SIZE - 1) {
                selX++;
            }
            else {
                selX = 0;
            }
            res[0] = selX;
            return(res);
        }
        else if (event.key.code == sf::Keyboard::Enter) {
            res[0] = -1;
            res[1] = -1;
            return(res);
            // Обработка нажатия клавиши Enter
        }
        else if (event.key.code == sf::Keyboard::Escape) {
            res[0] = -2;
            res[1] = -2;
            return(res);
            // Обработка нажатия клавиши Enter
        }
        else {
            return(res);
        }
    }
    //return currentState;
}

void pvp(sf::RenderWindow& window) {
    char wordsMan[FIELD_SIZE*FIELD_SIZE][FIELD_SIZE*FIELD_SIZE];
    int man_cnt = 0;
    char wordsBot[FIELD_SIZE*FIELD_SIZE][FIELD_SIZE * FIELD_SIZE];
    int bot_cnt = 0;
    int xyChosen[FIELD_SIZE * FIELD_SIZE][2];
    char fieldChar[FIELD_SIZE][FIELD_SIZE];
    sf::String FieldValue[FIELD_SIZE][FIELD_SIZE];
    for (int i = 0; i < FIELD_SIZE; i++) {
        for (int j = 0; j < FIELD_SIZE; j++) {
            fieldChar[i][j] = ' ';
        }
    }
    for (int i = 0; i < FIELD_SIZE; i++) {
        for (int j = 0; j < FIELD_SIZE; j++) {
            FieldValue[i][j] = " ";
        }
    }
    
    sf::Font font;
    if (!font.loadFromFile("arial.ttf")) {
        return;
    }
    std::vector<std::vector<Cell>> field(FIELD_SIZE, std::vector<Cell>(FIELD_SIZE));
    for (int i = 0; i < FIELD_SIZE; ++i) {
        for (int j = 0; j < FIELD_SIZE; ++j) {
            int x = (WINDOW_WIDTH - (FIELD_SIZE * CELL_SIZE)) / 2 + j * CELL_SIZE;
            int y = (WINDOW_HEIGHT - (FIELD_SIZE * CELL_SIZE)) / 2 + i * CELL_SIZE;
            createCell(field[i][j], font, x, y);
        }
    }

    sf::Text player1Text;
    player1Text.setFont(font);
    player1Text.setString("Player: 0");
    player1Text.setCharacterSize(24);
    player1Text.setFillColor(sf::Color::White);
    player1Text.setPosition(20, (WINDOW_HEIGHT - PLAYER_INFO_HEIGHT) / 2);

    sf::Text player2Text;
    player2Text.setFont(font);
    player2Text.setString("Bot: 0");
    player2Text.setCharacterSize(24);
    player2Text.setFillColor(sf::Color::White);
    sf::FloatRect player2Bounds = player2Text.getLocalBounds();
    player2Text.setPosition(WINDOW_WIDTH - PLAYER_INFO_WIDTH - 20, (WINDOW_HEIGHT - PLAYER_INFO_HEIGHT) / 2);

    sf::String inputText;
    sf::Event event;
    sf::Event Tvent;
    int selX = 0;
    int selY = 0;
    int* corSel = (int*)(calloc(2, sizeof(int)));
    corSel[0] = selX;
    corSel[1] = selY;
    int trigCel = 0;
    int nowPl = 0;
    int status = 0;
    int word_len = 0;
    for (int i = 0; i < FIELD_SIZE * FIELD_SIZE; i++) {
        xyChosen[word_len][0] = -1;
        xyChosen[word_len][1] = -1;
    }
    while (window.isOpen()) {
        while (window.pollEvent(event)) {
            if (status == 0) {
                if (event.type == sf::Event::Closed) {
                    window.close();
                }
                else if (event.type == sf::Event::KeyPressed && trigCel == 0) {
                    corSel = cellChoice(event, selX, selY);
                    if (corSel[0] + corSel[1] >= 0) {
                        selX = corSel[0];
                        selY = corSel[1];
                    }
                    else if (corSel[0] + corSel[1] == -2) {
                        corSel[0] = selX;
                        corSel[1] = selY;
                        if (FieldValue[selY][selX] != " ") {
                            trigCel = 0;
                        }
                        else {
                            trigCel = 1;
                        }
                    }
                    //printf("%d %d\n", selX, selY);
                }
                else if (event.type == sf::Event::KeyPressed && trigCel == 1) {
                    corSel = cellChoice(event, selX, selY);
                    if (corSel[0] + corSel[1] == -2) {
                        corSel[0] = selX;
                        corSel[1] = selY;
                        //fieldChar[selY][selX] = (wchar_t)((int)inputText[0]-1104);
                        //printf("%d\n", inputText[0]);
                        FieldValue[selY][selX] = inputText[0];
                        fieldChar[selY][selX] = (FieldValue[selY][selX]).getData()[0] - 80;
                        if (checkLetter(fieldChar[selY][selX]) == 0) {
                            FieldValue[selY][selX] = " ";
                            fieldChar[selY][selX] = ' ';
                        }
                        else {
                            status = 1;
                        }
                        //printf("%d", fieldChar[selY][selX]);
                        //fieldChar[selY][selX][0] = (wchar_t)inputText[0];
                        /*if (isalpha(inputText[0])) {
                            fieldChar[selY][selX][0] = (char)inputText[0];
                        }*/
                        trigCel = 0;
                        
                    }
                    else if (corSel[0] + corSel[1] == -4) {
                        corSel[0] = selX;
                        corSel[1] = selY;
                        FieldValue[selY][selX] = " ";
                        fieldChar[selY][selX] = ' ';
                        trigCel = 0;
                    }
                    //printf("%d %d\n", selX, selY);
                }
                else if (trigCel == 1) {
                    if (event.type == sf::Event::TextEntered) {
                        if (FieldValue[selY][selX] != " ") {
                            trigCel = 0;
                            continue;
                        }
                        inputText = ((wchar_t)(event.text.unicode));
                        if (inputText[0] >= 1072 && inputText[0] <= 1103) {
                            inputText[0] -= 32;
                        }
                    }
                }
            }
            else if(status == 1){
                //int word_len = 0;
                if (event.type == sf::Event::Closed) {
                    window.close();
                }
                else if (event.type == sf::Event::KeyPressed && trigCel == 0) {
                    corSel = cellChoice(event, selX, selY);
                    if (corSel[0] + corSel[1] >= 0) {
                        selX = corSel[0];
                        selY = corSel[1];
                    }
                    else if (corSel[0] + corSel[1] == -2) {
                        corSel[0] = selX;
                        corSel[1] = selY;
                        if (FieldValue[selY][selX] != " ") {
                            trigCel = 1;
                            xyChosen[word_len][0] = selY;
                            xyChosen[word_len][1] = selX;
                            //wordsMan[man_cnt][word_len] = fieldChar[selY][selX];
                            word_len++;
                        }
                        else {
                            trigCel = 0;
                        }
                    }
                    //printf("%d %d\n", selX, selY);
                }
                else if (event.type == sf::Event::KeyPressed && trigCel == 1) {
                    corSel = cellChoice(event, selX, selY);
                    if (corSel[0] + corSel[1] >= 0) {
                        selX = corSel[0];
                        selY = corSel[1];
                        int a = inArray(xyChosen, word_len, selY, selX);
                        if (a == 0) {
                            xyChosen[word_len][0] = selY;
                            xyChosen[word_len][1] = selX;
                            //wordsMan[man_cnt][0] = fieldChar[selY][selX];
                            word_len++;
                        }
                        else {
                            for (int i = 0; i < FIELD_SIZE * FIELD_SIZE; i++) {
                                xyChosen[i][0] = -1;
                                xyChosen[i][1] = -1;
                            }
                            word_len = 0;
                            xyChosen[word_len][0] = selY;
                            xyChosen[word_len][1] = selX;
                            word_len++;
                        }
                    }
                    if (corSel[0] + corSel[1] == -2) {
                        corSel[0] = selX;
                        corSel[1] = selY;
                        //man_cnt++;
                        status = 0;
                        trigCel = 0;
                        for (int i = 0; i < word_len; i++) {
                            wordsMan[man_cnt][i] = fieldChar[xyChosen[i][0]][xyChosen[i][1]];
                        }
                        for (int i = 0; i < word_len; i++) {
                            printf("%c", wordsMan[man_cnt][i]);
                        }
                        printf("\n");
                        word_len = 0;
                        man_cnt++;
                    }
                    else if (corSel[0] + corSel[1] == -4) {
                        corSel[0] = selX;
                        corSel[1] = selY;
                        trigCel = 0;
                        for (int i = 0; i < FIELD_SIZE * FIELD_SIZE; i++) {
                            xyChosen[i][0] = -1;
                            xyChosen[i][1] = -1;
                        }
                        word_len = 0;

                    }
                }
            }
        }

        window.clear(sf::Color::Black);
        if (status == 0) {
            for (int i = 0; i < FIELD_SIZE; ++i) {
                for (int j = 0; j < FIELD_SIZE; ++j) {
                    //int a = inArray(xyChosen, word_len, i, j);
                    if (i == selY && j == selX && trigCel == 0) {
                        field[i][j].shape.setFillColor(sf::Color::White);
                        field[i][j].text.setFillColor(sf::Color::Black);
                        field[i][j].shape.setOutlineColor(sf::Color::White);
                        //field[i][j].content[0] = fieldChar[i][j][0];
                        field[i][j].text.setString(FieldValue[i][j]);
                        //field[i][j].value = fieldChar[i][j][0];
                    }
                    else if (i == selY && j == selX && trigCel == 1) {
                        field[i][j].shape.setFillColor(sf::Color::Green);
                        field[i][j].text.setFillColor(sf::Color::Black);
                        field[i][j].shape.setOutlineColor(sf::Color::White);
                        field[i][j].text.setString(inputText);
                    }
                    else {
                        field[i][j].shape.setFillColor(sf::Color::Black);
                        field[i][j].text.setFillColor(sf::Color::White);
                        field[i][j].shape.setOutlineColor(sf::Color::White);
                        //field[i][j].content[0] = fieldChar[i][j][0];
                        field[i][j].text.setString(FieldValue[i][j]);
                        //field[i][j].text.setString(fieldChar[i][j][0]);
                    }
                    window.draw(field[i][j].shape);
                    //if()
                    //field[i][j].text.setString(field[i][j].content + inputText);
                    window.draw(field[i][j].text);
                }
            }
        }
        else if(status == 1) {
            for (int i = 0; i < FIELD_SIZE; ++i) {
                for (int j = 0; j < FIELD_SIZE; ++j) {
                    int a = inArray(xyChosen, word_len, i, j);
                    if (i == selY && j == selX && trigCel == 0) {
                        field[i][j].shape.setFillColor(sf::Color::White);
                        field[i][j].text.setFillColor(sf::Color::Black);
                        field[i][j].shape.setOutlineColor(sf::Color::White);
                        //field[i][j].content[0] = fieldChar[i][j][0];
                        field[i][j].text.setString(FieldValue[i][j]);
                        //field[i][j].value = fieldChar[i][j][0];
                    }
                    else if (i == selY && j == selX && trigCel == 1) {
                        field[i][j].shape.setFillColor(sf::Color::Magenta);
                        field[i][j].text.setFillColor(sf::Color::Black);
                        field[i][j].shape.setOutlineColor(sf::Color::White);
                        //field[i][j].content[0] = fieldChar[i][j][0];
                        field[i][j].text.setString(FieldValue[i][j]);
                        //field[i][j].value = fieldChar[i][j][0];
                    }
                    else if (a == 1 && trigCel == 1) {
                        field[i][j].shape.setFillColor(sf::Color::Red);
                        field[i][j].text.setFillColor(sf::Color::Black);
                        field[i][j].shape.setOutlineColor(sf::Color::White);
                        field[i][j].text.setString(FieldValue[i][j]);
                    }
                    else {
                        field[i][j].shape.setFillColor(sf::Color::Black);
                        field[i][j].text.setFillColor(sf::Color::White);
                        field[i][j].shape.setOutlineColor(sf::Color::White);
                        //field[i][j].content[0] = fieldChar[i][j][0];
                        field[i][j].text.setString(FieldValue[i][j]);
                        //field[i][j].text.setString(fieldChar[i][j][0]);
                    }
                    window.draw(field[i][j].shape);
                    window.draw(field[i][j].text);
                }
            }
        }

        window.draw(player1Text);
        window.draw(player2Text);

        window.display();
    }
}

int main() {
    setlocale(LC_ALL, "");
    SetConsoleCP(1251);
    int nowButton = 0;
    sf::RenderWindow window(sf::VideoMode(WINDOW_WIDTH, WINDOW_HEIGHT), "Balda Game");

    sf::Font font;
    if (!font.loadFromFile("arial.ttf")) {
        return EXIT_FAILURE;
    }

    Button buttons[4];
    const sf::String buttonLabels[] = { L"Играть PvP", L"Играть PvE", L"Сложность", L"Справка" };
    for (int i = 0; i < 4; ++i) {
        int x = (WINDOW_WIDTH - BUTTON_WIDTH) / 2;
        int y = (BUTTON_HEIGHT + MENU_PADDING) * i + MENU_PADDING;
        createButton(buttons[i], buttonLabels[i], font, x, y);
    }

    sf::Text titleText;
    titleText.setFont(font);
    titleText.setString(L"<БАЛДА>");
    titleText.setCharacterSize(48);
    titleText.setFillColor(sf::Color::White);
    sf::FloatRect titleBounds = titleText.getLocalBounds();
    titleText.setPosition((WINDOW_WIDTH - titleBounds.width) / 2, 50);

    //MenuState currentState = MenuState::MENU;
    int currentState = -1;
    sf::Vector2f mousePos;
    bool mouseClicked = false;
    int trig = 0;

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }
            else if (event.type == sf::Event::KeyPressed) {
                int prevState = currentState;
                currentState = handleInput(event, currentState);
                if (currentState == -1) {
                    currentState = prevState;
                    trig = 1;
                }
            }
        }

        window.clear(sf::Color::Black);
        if (trig == 1) {
            if (currentState == 0) {
                pvp(window);
            }
        }
        else {
            for (int i = 0; i < 4; ++i) {
                if (i == currentState) {
                    buttons[i].shape.setFillColor(sf::Color::Green);
                    buttons[i].text.setFillColor(sf::Color::White);
                }
                else {
                    buttons[i].shape.setFillColor(sf::Color::White);
                    buttons[i].text.setFillColor(sf::Color::Black);
                }
                window.draw(buttons[i].shape);
                window.draw(buttons[i].text);

            }
            window.draw(titleText);
        }

        window.display();
    }

    for (int i = 0; i < 4; ++i) {
        destroyButton(buttons[i]);
    }

    return EXIT_SUCCESS;
}

